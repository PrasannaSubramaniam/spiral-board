{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","rolldice","currentPlayer","state","score","diceNumber","Math","ceil","random","totalCount","setState","result","resetBoard","JSON","parse","stringify","initialState","renderSquare","squareIndex","className","renderRow","rowIndex","rowsCount","renderedSquares","push","renderBoard","renderedRows","X","Y","this","onClick","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAsHeA,G,wDAlHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAaRC,SAAW,WAAO,IACVC,EAAkB,EAAKC,MAAvBD,cACAE,EAAU,EAAKD,MAAfC,MACFC,EAAaC,KAAKC,KAAqB,EAAhBD,KAAKE,UAChCJ,EAAMF,IAAkBG,EACpBD,EAAMF,GAAiB,EAAKO,YAC9BL,EAAMF,IAAkBG,EACxB,EAAKK,SAAS,CACZL,aACAH,cAAiC,MAAlBA,EAAwB,IAAM,IAC7CE,WAEOA,EAAMF,KAAmB,EAAKO,WACvC,EAAKC,SAAS,CACZL,aACAD,QACAO,OAAO,UAAD,OAAYT,EAAZ,UAGR,EAAKQ,SAAS,CACZL,aACAH,cAAiC,MAAlBA,EAAwB,IAAM,IAC7CE,WApCa,EAwCnBQ,WAAa,WACX,EAAKF,SAASG,KAAKC,MAAMD,KAAKE,UAAU,EAAKC,iBAzC5B,EA2CnBC,aAAe,SAACC,GAAiB,IACzBd,EAAU,EAAKD,MAAfC,MACN,OACE,sBAAKe,UAAU,SAAf,UACE,+BAAOD,IACNA,IAAgBd,EAAK,EAAQ,IAAM,GACnCc,IAAgBd,EAAK,EAAQ,IAAM,OAjDvB,EAqDnBgB,UAAY,SAACC,EAAUC,GACrB,IAAIC,EAAkB,GACtB,GAAIF,EAAW,GAAK,EAClB,IACE,IAAIH,EAAcI,EAAYD,EAC9BH,EAAcI,EAAYD,EAAWC,EACrCJ,IAEAK,EAAgBC,KAAK,EAAKP,aAAaC,SAGzC,IACE,IAAIA,EAAcI,EAAYD,EAAWC,EAAY,EACrDJ,EAAcI,EAAYD,EAAW,EACrCH,IAEAK,EAAgBC,KAAK,EAAKP,aAAaC,IAG3C,OAAO,qBAAKC,UAAU,MAAf,SAAsBI,KAxEZ,EA0EnBE,YAAc,SAACH,GAEb,IADA,IAAII,EAAe,GACVL,EAAWC,EAAWD,EAAW,EAAGA,IAC3CK,EAAaF,KAAK,EAAKJ,UAAUC,EAAUC,IAE7C,OAAO,qBAAKH,UAAU,QAAf,SAAwBO,KA7E/B,EAAKjB,WAAa,EAAKT,MAAMsB,UAAY,EAAKtB,MAAMsB,UACpD,EAAKN,aAAe,CAClBd,cAAe,IACfE,MAAO,CACLuB,EAAG,EACHC,EAAG,GAELvB,WAAY,EACZM,OAAQ,MAEV,EAAKR,MAAQU,KAAKC,MAAMD,KAAKE,UAAU,EAAKC,eAZ3B,E,qDAkFjB,OACE,sBAAKG,UAAU,gBAAf,UACE,qBAAKA,UAAU,gCAAf,SACGU,KAAK1B,MAAMQ,OACVkB,KAAK1B,MAAMQ,OAEX,qCACE,sBAAKQ,UAAU,SAAf,oBACUU,KAAK1B,MAAMD,cADrB,aAGA,qBAAKiB,UAAU,qBAAqBW,QAASD,KAAK5B,SAAlD,uBAGA,qBAAKkB,UAAU,cAAf,SAA8BU,KAAK1B,MAAME,kBAI/C,qBAAKc,UAAU,kBAAf,SACGU,KAAKJ,YAAYI,KAAK7B,MAAMsB,aAE9BO,KAAK1B,MAAMQ,OACV,qBAAKQ,UAAU,sBAAsBW,QAASD,KAAKjB,WAAnD,mBAIA,U,GA5GQmB,IAAMC,YCSTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAKtB,UAAW,OAElBuB,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.43ccdf3a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.totalCount = this.props.rowsCount * this.props.rowsCount;\n    this.initialState = {\n      currentPlayer: \"X\",\n      score: {\n        X: 0,\n        Y: 0,\n      },\n      diceNumber: 0,\n      result: null,\n    };\n    this.state = JSON.parse(JSON.stringify(this.initialState));\n  }\n  rolldice = () => {\n    let { currentPlayer } = this.state;\n    let { score } = this.state;\n    let diceNumber = Math.ceil(Math.random() * 6);\n    score[currentPlayer] += diceNumber;\n    if (score[currentPlayer] > this.totalCount) {\n      score[currentPlayer] -= diceNumber;\n      this.setState({\n        diceNumber,\n        currentPlayer: currentPlayer === \"X\" ? \"Y\" : \"X\",\n        score,\n      });\n    } else if (score[currentPlayer] === this.totalCount) {\n      this.setState({\n        diceNumber,\n        score,\n        result: `Player ${currentPlayer} WON`,\n      });\n    } else {\n      this.setState({\n        diceNumber,\n        currentPlayer: currentPlayer === \"X\" ? \"Y\" : \"X\",\n        score,\n      });\n    }\n  };\n  resetBoard = () => {\n    this.setState(JSON.parse(JSON.stringify(this.initialState)));\n  };\n  renderSquare = (squareIndex) => {\n    let { score } = this.state;\n    return (\n      <div className=\"square\">\n        <span>{squareIndex}</span>\n        {squareIndex === score[\"X\"] ? \"X\" : \"\"}\n        {squareIndex === score[\"Y\"] ? \"Y\" : \"\"}\n      </div>\n    );\n  };\n  renderRow = (rowIndex, rowsCount) => {\n    let renderedSquares = [];\n    if (rowIndex % 2 == 0) {\n      for (\n        let squareIndex = rowsCount * rowIndex;\n        squareIndex > rowsCount * rowIndex - rowsCount;\n        squareIndex--\n      ) {\n        renderedSquares.push(this.renderSquare(squareIndex));\n      }\n    } else {\n      for (\n        let squareIndex = rowsCount * rowIndex - rowsCount + 1;\n        squareIndex < rowsCount * rowIndex + 1;\n        squareIndex++\n      ) {\n        renderedSquares.push(this.renderSquare(squareIndex));\n      }\n    }\n    return <div className=\"row\">{renderedSquares}</div>;\n  };\n  renderBoard = (rowsCount) => {\n    let renderedRows = [];\n    for (let rowIndex = rowsCount; rowIndex > 0; rowIndex--) {\n      renderedRows.push(this.renderRow(rowIndex, rowsCount));\n    }\n    return <div className=\"board\">{renderedRows}</div>;\n  };\n  render() {\n    return (\n      <div className=\"app-container\">\n        <div className=\"result-container unselectable\">\n          {this.state.result ? (\n            this.state.result\n          ) : (\n            <>\n              <div className=\"result\">\n                Player {this.state.currentPlayer}'s Turn\n              </div>\n              <div className=\"roll-button button\" onClick={this.rolldice}>\n                Roll Dice\n              </div>\n              <div className=\"dice-number\">{this.state.diceNumber}</div>\n            </>\n          )}\n        </div>\n        <div className=\"board-container\">\n          {this.renderBoard(this.props.rowsCount)}\n        </div>\n        {this.state.result ? (\n          <div className=\"reset-button button\" onClick={this.resetBoard}>\n            Reset\n          </div>\n        ) : (\n          \"\"\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App rowsCount={10} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}