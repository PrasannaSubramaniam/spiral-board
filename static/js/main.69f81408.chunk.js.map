{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","checkLS","score","rolldice","state","currentPlayer","xDiceNumber","yDiceNumber","diceNumber","Math","ceil","random","totalCount","setState","result","resetBoard","JSON","parse","stringify","initialState","renderSquare","squareIndex","className","renderRow","rowIndex","rowsCount","renderedSquares","push","renderBoard","renderedRows","renderLadders","class","renderSnakes","X","Y","this","onClick","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.69f81408.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.totalCount = this.props.rowsCount * this.props.rowsCount;\n    this.initialState = {\n      currentPlayer: \"X\",\n      score: {\n        X: 0,\n        Y: 0,\n      },\n      xDiceNumber: 0,\n      yDiceNumber: 0,\n      result: null,\n    };\n    this.state = JSON.parse(JSON.stringify(this.initialState));\n  }\n  checkLS = (score) => {\n    switch (score) {\n      case 1:\n        return 23;\n      case 5:\n        return 14;\n      case 21:\n        return 42;\n      case 29:\n        return 85;\n      case 36:\n        return 58;\n      case 68:\n        return 89;\n      case 78:\n        return 99;\n      case 25:\n        return 3;\n      case 35:\n        return 10;\n      case 47:\n        return 7;\n      case 57:\n        return 38;\n      case 77:\n        return 52;\n      case 97:\n        return 61;\n      default:\n        return score;\n    }\n  };\n  rolldice = () => {\n    let { currentPlayer, score, xDiceNumber, yDiceNumber } = this.state;\n    let diceNumber = Math.ceil(Math.random() * 6);\n    score[currentPlayer] += diceNumber;\n    if (currentPlayer === \"X\") {\n      xDiceNumber = diceNumber;\n    }\n    if (currentPlayer === \"Y\") {\n      yDiceNumber = diceNumber;\n    }\n    if (score[currentPlayer] > this.totalCount) {\n      score[currentPlayer] -= diceNumber;\n      this.setState({\n        xDiceNumber,\n        yDiceNumber,\n        currentPlayer: currentPlayer === \"X\" ? \"Y\" : \"X\",\n        score,\n      });\n    } else if (score[currentPlayer] === this.totalCount) {\n      this.setState({\n        xDiceNumber,\n        yDiceNumber,\n        score,\n        result: `Player ${currentPlayer} WON`,\n      });\n    } else {\n      score[currentPlayer] = this.checkLS(score[currentPlayer]);\n      this.setState({\n        xDiceNumber,\n        yDiceNumber,\n        currentPlayer: currentPlayer === \"X\" ? \"Y\" : \"X\",\n        score,\n      });\n    }\n  };\n  resetBoard = () => {\n    this.setState(JSON.parse(JSON.stringify(this.initialState)));\n  };\n  renderSquare = (squareIndex) => {\n    let { score } = this.state;\n    return (\n      <div className=\"square\">\n        <span>{squareIndex}</span>\n        {squareIndex === score[\"X\"] ? <div className=\"player-x\">X</div> : \"\"}\n        {squareIndex === score[\"Y\"] ? <div className=\"player-y\">Y</div> : \"\"}\n      </div>\n    );\n  };\n  renderRow = (rowIndex, rowsCount) => {\n    let renderedSquares = [];\n    if (rowIndex % 2 == 0) {\n      for (\n        let squareIndex = rowsCount * rowIndex;\n        squareIndex > rowsCount * rowIndex - rowsCount;\n        squareIndex--\n      ) {\n        renderedSquares.push(this.renderSquare(squareIndex));\n      }\n    } else {\n      for (\n        let squareIndex = rowsCount * rowIndex - rowsCount + 1;\n        squareIndex < rowsCount * rowIndex + 1;\n        squareIndex++\n      ) {\n        renderedSquares.push(this.renderSquare(squareIndex));\n      }\n    }\n    return <div className=\"row\">{renderedSquares}</div>;\n  };\n  renderBoard = (rowsCount) => {\n    let renderedRows = [];\n    for (let rowIndex = rowsCount; rowIndex > 0; rowIndex--) {\n      renderedRows.push(this.renderRow(rowIndex, rowsCount));\n    }\n    return <div className=\"board\">{renderedRows}</div>;\n  };\n  renderLadders = () => {\n    return (\n      <div className=\"ladders\">\n        <div class=\"ladder-1 ladder\"></div>\n        <div class=\"ladder-2 ladder\"></div>\n        <div class=\"ladder-3 ladder\"></div>\n        <div class=\"ladder-4 ladder\"></div>\n        <div class=\"ladder-5 ladder\"></div>\n        <div class=\"ladder-6 ladder\"></div>\n        <div class=\"ladder-7 ladder\"></div>\n        <div class=\"ladder-8 ladder\"></div>\n      </div>\n    );\n  };\n  renderSnakes = () => {\n    return (\n      <div className=\"snakes\">\n        <div class=\"snake-1 snake\"></div>\n        <div class=\"snake-2 snake\"></div>\n        <div class=\"snake-3 snake\"></div>\n        <div class=\"snake-4 snake\"></div>\n        <div class=\"snake-5 snake\"></div>\n        <div class=\"snake-6 snake\"></div>\n      </div>\n    );\n  };\n  render() {\n    return (\n      <div className=\"app-container unselectable\">\n        <div className=\"result-container\">\n          {this.state.result ? (\n            this.state.result\n          ) : (\n            <>\n              <div className=\"result\">\n                Player {this.state.currentPlayer}'s Turn\n              </div>\n              <div className=\"dice-number\">X : {this.state.xDiceNumber}</div>\n              <div className=\"roll-button button\" onClick={this.rolldice}>\n                Roll Dice\n              </div>\n              <div className=\"dice-number\">Y : {this.state.yDiceNumber}</div>\n            </>\n          )}\n        </div>\n        <div className=\"board-container\">\n          {this.renderBoard(this.props.rowsCount)}\n          {this.renderLadders()}\n          {this.renderSnakes()}\n        </div>\n        {this.state.result ? (\n          <div className=\"reset-button button\" onClick={this.resetBoard}>\n            Reset\n          </div>\n        ) : (\n          \"\"\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App rowsCount={10} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}