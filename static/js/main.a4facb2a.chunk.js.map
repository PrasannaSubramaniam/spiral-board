{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","totalCount","rowsCount","useState","currentPlayer","setcurrentPlayer","X","Y","score","setscore","xDiceNumber","setxDiceNumber","yDiceNumber","setyDiceNumber","result","setresult","renderSquare","squareIndex","className","renderRow","rowIndex","renderedSquares","push","onClick","diceNumber","Math","ceil","random","s","checkLS","renderedRows","renderBoard","class","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4facb2a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nconst App = (props) => {\n  const totalCount = props.rowsCount * props.rowsCount;\n  const [currentPlayer, setcurrentPlayer] = useState(\"X\");\n  const [score, setscore] = useState({ X: 0, Y: 0 });\n  const [xDiceNumber, setxDiceNumber] = useState(0);\n  const [yDiceNumber, setyDiceNumber] = useState(0);\n  const [result, setresult] = useState(null);\n  const checkLS = (s) => {\n    switch (s) {\n      case 1:\n        return 23;\n      case 5:\n        return 14;\n      case 21:\n        return 42;\n      case 29:\n        return 85;\n      case 36:\n        return 58;\n      case 68:\n        return 89;\n      case 78:\n        return 99;\n      case 25:\n        return 3;\n      case 35:\n        return 10;\n      case 47:\n        return 7;\n      case 57:\n        return 38;\n      case 77:\n        return 52;\n      case 97:\n        return 61;\n      default:\n        return s;\n    }\n  };\n  const rolldice = () => {\n    // let { currentPlayer, score, xDiceNumber, yDiceNumber } = this.state;\n    let diceNumber = Math.ceil(Math.random() * 6);\n    let s = { ...score };\n    s[currentPlayer] = score[currentPlayer] + diceNumber;\n    if (currentPlayer === \"X\") {\n      setxDiceNumber(diceNumber);\n    }\n    if (currentPlayer === \"Y\") {\n      setyDiceNumber(diceNumber);\n    }\n    if (s[currentPlayer] > totalCount) {\n      s[currentPlayer] -= diceNumber;\n      setcurrentPlayer(currentPlayer === \"X\" ? \"Y\" : \"X\");\n      setscore(s);\n      // this.setState({\n      //   xDiceNumber,\n      //   yDiceNumber,\n      //   currentPlayer: currentPlayer === \"X\" ? \"Y\" : \"X\",\n      //   score,\n      // });\n    } else if (s[currentPlayer] === totalCount) {\n      setscore(s);\n      setresult(`Player ${currentPlayer} WON`);\n      // this.setState({\n      //   xDiceNumber,\n      //   yDiceNumber,\n      //   score,\n      //   result: `Player ${currentPlayer} WON`,\n      // });\n    } else {\n      s[currentPlayer] = checkLS(s[currentPlayer]);\n      // this.setState({\n      //   xDiceNumber,\n      //   yDiceNumber,\n      //   currentPlayer: currentPlayer === \"X\" ? \"Y\" : \"X\",\n      //   score,\n      // });\n      setscore(s);\n      setcurrentPlayer(currentPlayer === \"X\" ? \"Y\" : \"X\");\n    }\n  };\n  const resetBoard = () => {\n    setcurrentPlayer(\"X\");\n    setscore({ X: 0, Y: 0 });\n    setxDiceNumber(0);\n    setyDiceNumber(0);\n    setresult(null);\n  };\n  const renderSquare = (squareIndex) => {\n    return (\n      <div className=\"square\">\n        <span>{squareIndex}</span>\n        {squareIndex === score[\"X\"] ? <div className=\"player-x\">X</div> : \"\"}\n        {squareIndex === score[\"Y\"] ? <div className=\"player-y\">Y</div> : \"\"}\n      </div>\n    );\n  };\n  const renderRow = (rowIndex, rowsCount) => {\n    let renderedSquares = [];\n    if (rowIndex % 2 == 0) {\n      for (\n        let squareIndex = rowsCount * rowIndex;\n        squareIndex > rowsCount * rowIndex - rowsCount;\n        squareIndex--\n      ) {\n        renderedSquares.push(renderSquare(squareIndex));\n      }\n    } else {\n      for (\n        let squareIndex = rowsCount * rowIndex - rowsCount + 1;\n        squareIndex < rowsCount * rowIndex + 1;\n        squareIndex++\n      ) {\n        renderedSquares.push(renderSquare(squareIndex));\n      }\n    }\n    return <div className=\"row\">{renderedSquares}</div>;\n  };\n  const renderBoard = (rowsCount) => {\n    let renderedRows = [];\n    for (let rowIndex = rowsCount; rowIndex > 0; rowIndex--) {\n      renderedRows.push(renderRow(rowIndex, rowsCount));\n    }\n    return <div className=\"board\">{renderedRows}</div>;\n  };\n  const renderLadders = () => {\n    return (\n      <div className=\"ladders\">\n        <div class=\"ladder-1 ladder\"></div>\n        <div class=\"ladder-2 ladder\"></div>\n        <div class=\"ladder-3 ladder\"></div>\n        <div class=\"ladder-4 ladder\"></div>\n        <div class=\"ladder-5 ladder\"></div>\n        <div class=\"ladder-6 ladder\"></div>\n        <div class=\"ladder-7 ladder\"></div>\n        <div class=\"ladder-8 ladder\"></div>\n      </div>\n    );\n  };\n  const renderSnakes = () => {\n    return (\n      <div className=\"snakes\">\n        <div class=\"snake-1 snake\"></div>\n        <div class=\"snake-2 snake\"></div>\n        <div class=\"snake-3 snake\"></div>\n        <div class=\"snake-4 snake\"></div>\n        <div class=\"snake-5 snake\"></div>\n        <div class=\"snake-6 snake\"></div>\n      </div>\n    );\n  };\n  return (\n    <div className=\"app-container unselectable\">\n      <div className=\"result-container\">\n        {result ? (\n          result\n        ) : (\n          <>\n            <div className=\"result\">Player {currentPlayer}'s Turn</div>\n            <div className=\"dice-number\">X : {xDiceNumber}</div>\n            <div className=\"roll-button button\" onClick={rolldice}>\n              Roll Dice\n            </div>\n            <div className=\"dice-number\">Y : {yDiceNumber}</div>\n          </>\n        )}\n      </div>\n      <div className=\"board-container\">\n        {renderBoard(props.rowsCount)}\n        {renderLadders()}\n        {renderSnakes()}\n      </div>\n      {result ? (\n        <div className=\"reset-button button\" onClick={resetBoard}>\n          Reset\n        </div>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App rowsCount={10} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}